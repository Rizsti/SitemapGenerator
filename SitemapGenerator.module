<?php

/**
 * Spex: An asset and template management module for the ProcessWire.
 * 
 * By Jonathan Dart
 * http://metricmarketing.ca/blog/author/jonathan-dart
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class SitemapGenerator extends WireData implements Module, ConfigurableModule
{
	const FILENAME="sitemap.xml";
	static $defaults = array(
		'priority' => ".5",
		'changefreq' => "weekly",
		'index_images' => false
	);
	protected $sitemaps = array();

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'Sitemap Generator', 
			'version' => 100, 
			'singular' => true, 
			'autoload' => true,
			'summary' => "Generate an SEO sitemap or multiple sitemaps with an index"
		);
	}

	public function init() 
	{
		$this->addHookAfter("Page::render", $this, 'indexSite');
	}


	static public function getModuleConfigInputfields(array $data) 
	{


		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel('modules');

		$field = $modules->get("InputfieldText");
		$field->name = "priority";
		$field->label = __("Default Priority");
		$field->value = static::dataValueOrDefault('priority', $data);
		$field->description = __("The default value of <priority></priority>");
		$field->columnWidth = 50;
		$fields->add($field);

		$field = $modules->get("InputfieldText");
		$field->name = "changefreq";
		$field->label = __("Default Change Frequency");
		$field->value = static::dataValueOrDefault('changefreq', $data);
		$field->description = __("The default value of <changefreq></changefreq>");
		$field->columnWidth = 50;
		$fields->add($field);


		$field = $modules->get('InputfieldMarkup');
		$field->label  = __('Index Types');

		$field_checkbox = $modules->get("InputfieldCheckbox");
		$field_checkbox->name = "index_images";
		$field_checkbox->label = __("Index Images?");
		$field_checkbox->checked = static::dataValueOrDefault('index_images', $data);

		$field->add($field_checkbox);
		$fields->add($field);


		$field = $modules->get('InputfieldMarkup');
		$field->label  = __('Index');

		$field_button = $modules->get('InputfieldButton');
		$field_button->name = 'index_site';
		$field_button->value = __('Generate Sitemap');
		$field_button->href = 'edit?name='.wire('input')->get('name').'&sg_update=sitemap';
		$field_button->description = __("Doing this will overwrite your existing sitemap.xml file. Please be sure to submit any changes before generating your file.");
		
		$field->add($field_button);

		$fields->add($field);


		return $fields;

	}


	public function indexSite($event) {
		if ($this->input->get('sg_update') != 'sitemap' || $event->object->template != 'admin') 
			return;

		if ($this->valueOrDefault('index_images')) {

			$allImages = array();
			foreach (wire('fields')->find("type=FieldtypeImage|FieldtypeCropImage") as $f) {
			    foreach (wire('pages')->find("$f.count>0") as $p) {
			        foreach ($p->$f as $i) $allImages[] = $i;
			    }
			}

			$handle = fopen('images-'.self::FILENAME, 'w') or die('Cannot open file: images-' . self::FILENAME);
			$data = "<?xml version='1.0' encoding='utf-8'?><!--Generated by Processwire Sitemap Generator on " . date("F d, Y g:i:s a") ."-->\n";
			$data .="<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n";
			foreach ($allImages as $f) {
				$data .= $this->getFileData($f);
			}
			$data .= "</urlset>";
			fwrite($handle, $data);
			fclose($handle);

			$this->sitemaps[] = 'images-' . self::FILENAME;
		}


		$filename = self::FILENAME;
		if (count($this->sitemaps) > 0) {
			$filename = 'pages-' . $filename;
		}

		$handle = fopen($filename, 'w') or die('Cannot open file: ' . $filename);
		$data = "<?xml version='1.0' encoding='utf-8'?><!--Generated by Processwire Sitemap Generator on " . date("F d, Y g:i:s a") ."-->\n";
		$data .="<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n";
		$home = wire('pages')->get(wire('config')->urls->root);
		$data .= $this->getChildren($home);
		$data .= "</urlset>";
		fwrite($handle, $data);
		fclose($handle);
		$this->sitemaps[] = $filename;

		if ($filename != self::FILENAME) {
			$handle = fopen(self::FILENAME, 'w') or die('Cannot open file: ' . self::FILENAME);
			$data = "<?xml version='1.0' encoding='utf-8'?><!--Generated by Processwire Sitemap Generator on " . date("F d, Y g:i:s a") ."-->\n";
			$data .="<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n";
			foreach ($this->sitemaps as $s) {
				$data .="\t<sitemap>\n";
				$data .="\t\t<loc>" . $home->httpUrl . $s . "</loc>\n";
				$data .="\t\t<lastmod>" . date("Y-m-dTH:i:sP") . "</lastmod>\n";
				$data .="\t</sitemap>\n";
			}
			$data .= "</sitemapindex>";
			fwrite($handle, $data);
			fclose($handle);
			$this->sitemaps[] = self::FILENAME;
		}
		foreach ($this->sitemaps as $s) {
			$this->session->message('Updated '. $s);
		}
	}

	public function getSitemapData($page, $priority=".5", $changefreq="weekly") {
		$string = "\t<url>\n";
		$string .= "\t\t<loc>" . $page->httpUrl . "</loc>\n";
		$string .= "\t\t<lastmod>" . date("Y-m-d", $page->modified) . "</lastmod>\n";
		$string .= "\t\t<changefreq>" . $changefreq . "</changefreq>\n";
		$string .= "\t\t<priority>" . $priority . "</priority>\n";
		$string .= "\t</url>\n";
		return $string;
	}

	public function getFileData($file, $priority=null, $changefreq=null) {
		if ($priority == null) 
			$priority = $this->valueOrDefault('priority');
		if ($changefreq == null)
			$changefreq = $this->valueOrDefault('changefreq');

		$string = "\t<url>\n";
		$string .= "\t\t<loc>" . $file->httpUrl . "</loc>\n";
		$string .= "\t\t<lastmod>" . date("Y-m-d", $file->modified) . "</lastmod>\n";
		$string .= "\t\t<changefreq>" . $changefreq . "</changefreq>\n";
		$string .= "\t\t<priority>" . $priority . "</priority>\n";
		$string .= "\t</url>\n";
		return $string;
	}

	public function getChildren($page) {
		$string = "";
		$priority = $this->valueOrDefault('priority');
		$changefreq = $this->valueOrDefault('changefreq');
		if ($page->parents->count == 0) {
			$priority = "1";
			$changefreq = "daily";
		}
		$string .= $this->getSitemapData($page, $priority, $changefreq);
		foreach ($page->children as $child) {
			$string .= $this->getChildren($child);
		}

		return $string;
	}


	public static function dataValueOrDefault($key, $data=null)
	{
		if ( ! isset($data[$key]))
			if (isset(static::$defaults[$key]))
				return static::$defaults[$key];
			else
				return null;

		return $data[$key];
	}

	public function valueOrDefault($key)
	{
		$value = null;

		if (isset($this->functionCallOptions[$key]))
			$value = $this->functionCallOptions[$key];

		if (is_null($value))
			$value = $this->get($key);

		if (is_null($value) && isset(static::$defaults[$key]))
			$value = static::$defaults[$key];

		return $value;
	}

}

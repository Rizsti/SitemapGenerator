<?php

/**
 * Spex: An asset and template management module for the ProcessWire.
 * 
 * By Jonathan Dart
 * http://metricmarketing.ca/blog/author/jonathan-dart
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class SitemapGenerator extends WireData implements Module, ConfigurableModule
{
	const FILENAME="sitemap.xml";

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'Sitemap Generator', 
			'version' => 99, 
			'singular' => true, 
			'autoload' => true,
		);
	}

	public function init() 
	{
		$this->addHookAfter("Page::render", $this, 'indexSite');
	}


	static public function getModuleConfigInputfields(array $data) 
	{
		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel('modules');
		$field = $modules->get('InputfieldMarkup');
		$field->label  = __('Generation');
		$field_button = $modules->get('InputfieldButton');
		$field_button->name = 'index_site';
		$field_button->value = __('Generate Sitemap');
		$field_button->href = 'edit?name='.wire('input')->get('name').'&sg_update=sitemap';
		$field_button->description = __("Doing this will overwrite your existing sitemap.xml file.");
		
		$field->add($field_button);

		$fields->add($field);
	}


	public function indexSite() {
		if ($this->input->get('gs_update') != 'sitemap' || $event->object->template != 'admin') 
			return;

		$handle = fopen(self::FILENAME, 'w') or die('Cannot open file: ' . self::FILENAME);
		$data = "<?xml version='1.0' encoding='utf-8'?><!--Generated by Processwire Sitemap Generator -->\n";
		$data .="<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\n";
		$home = wire('pages')->get('/');
		$data .= $this->getChildren($home);
		$data .= "</urlset>";
		fwrite($handle, $data);
		fclose($handle);
		$this->session->message('Updated sitemap');
	}

	public function getSitemapData($page, $priority=".5", $changefreq="weekly") {
		$string = "\t<url>\n";
		$string .= "\t\t<loc>" . $page->httpUrl . "</loc>\n";
		$string .= "\t\t<lastmod>" . date("Y-m-d", $page->modified) . "</lastmod>\n";
		$string .= "\t\t<changefreq>" . $changefreq . "</changefreq>\n";
		$string .= "\t\t<priority>" . $priority . "</priority>\n";
		$string .= "\t</url>\n";
		return $string;
	}

	public function getChildren($page) {
		$string = "";
		$priority = ".5";
		$changefreq = "weekly";
		if ($page->parents->count == 0) {
			$priority = "1";
			$changefreq = "daily";
		}
		$string .= $this->getSitemapData($page, $priority, $changefreq);
		foreach ($page->children as $child) {
			$string .= $this->getChildren($child);
		}

		return $string;
	}

}
